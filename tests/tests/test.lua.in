-- Copyright 2012 Douglas Linder
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICEnsE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIOns OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

package.path = package.path .. ";@TEST_PACKAGE_PATH@/?.lua"

-- Setup
test_factory = require "n/Test"
test = test_factory("@TEST_NAME@", "@TEST_DONE_PATH@", "@TEST_SUCCESS_PATH@")

-- This is a bit silly because we're testing we work with ourself,
-- so if we dont work we probably incorrectly mark ourselves as
-- working, but still...

-- Setup
function setup() 
  local test_factory = require "n/Test"
  local test = test_factory("testing_test", "dummy_done.txt", "dummy_success.txt")
  return test
end

-- Test that verify returns the correct status
test.bind("test_verify_passes_on_success", function(t)
  tt = setup()

  tt.bind("test_isTrue", function(t) t.isTrue(true, "isTrue"); end)
  tt.bind("test_isFalse", function(t) t.isFalse(false, "isFalse"); end)
  tt.bind("test_isEqual", function(t) t.isEqual(1, 1, "isEqual"); end)
  tt.bind("test_isNotEqual", function(t) t.isNotEqual(1, 2, "isNotEqual"); end)
  tt.bind("test_isNull", function(t) t.isNull(nil, "isNull"); end)
  tt.bind("test_isNotNull", function(t) t.isNotNull(tt, "isNotNull"); end)

  result = tt.verify()
  t.isEqual(result, 0, "Expected no errors")
end)

-- Test that verify returns an error count on failure
test.bind("test_verify_fails_on_errors", function(t)
  tt = setup()

  tt.bind("test_isTrue", function(t) t.isTrue(false, "failed isTrue"); end)
  tt.bind("test_isFalse", function(t) t.isFalse(true, "failed isFalse"); end)
  tt.bind("test_isEqual", function(t) t.isEqual(1, 2, "failed isEqual"); end)
  tt.bind("test_isNotEqual", function(t) t.isNotEqual(1, 1, "failed isNotEqual"); end)
  tt.bind("test_isNull", function(t) t.isNull(tt, "failed isNull"); end)
  tt.bind("test_isNotNull", function(t) t.isNotNull(nil, "failed isNotNull"); end)

  result = tt.verify()
  t.isEqual(result, 6, "Incorrect error count")
end)

-- Test that bind tests work
test.bind("test_can_bind_test_set", function(t)
  tt = setup()

  tests = {
    ["test_isTrue"] = function(t) t.isTrue(false, "failed isTrue"); end,
    ["test_isFalse"] = function(t) t.isFalse(true, "failed isFalse"); end,
    ["test_isEqual"] = function(t) t.isEqual(1, 2, "failed isEqual"); end,
    ["test_isNotEqual"] = function(t) t.isNotEqual(1, 1, "failed isNotEqual"); end,
    ["test_isNull"] = function(t) t.isNull(tt, "failed isNull"); end,
    ["test_isNotNull"] = function(t) t.isNotNull(nil, "failed isNotNull"); end
  }

  tt.bindTests("NS__", tests)

  result = tt.verify()
  t.isEqual(result, 6, "Incorrect error count")
end)

-- Done
test.verify()
